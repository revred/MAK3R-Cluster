name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Run unit tests
      run: dotnet test tests/MAK3R.UnitTests --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Run integration tests
      run: dotnet test tests/MAK3R.IntegrationTests --no-build --configuration Release --verbosity normal
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: '**/coverage.cobertura.xml'
        fail_ci_if_error: false

  build-pwa:
    name: Build PWA
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Publish PWA
      run: dotnet publish apps/MAK3R.PWA -c Release -o ./publish/pwa
      
    - name: Upload PWA artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pwa-build
        path: ./publish/pwa/wwwroot/

  build-api:
    name: Build API
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Publish API
      run: dotnet publish services/MAK3R.Api -c Release -o ./publish/api
      
    - name: Upload API artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-build
        path: ./publish/api/

  playwright-tests:
    name: Playwright E2E Tests
    runs-on: ubuntu-latest
    needs: [build-pwa, build-api]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Install Playwright
      run: |
        cd tests/MAK3R.PlaywrightTests
        npm install
        npx playwright install
        
    - name: Build solution
      run: dotnet build --configuration Release
      
    - name: Run Playwright tests
      run: dotnet test tests/MAK3R.PlaywrightTests --configuration Release
      
    - name: Upload Playwright results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-results
        path: tests/MAK3R.PlaywrightTests/TestResults/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-pwa, build-api, playwright-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Download PWA artifacts
      uses: actions/download-artifact@v4
      with:
        name: pwa-build
        path: ./pwa-build/
        
    - name: Download API artifacts
      uses: actions/download-artifact@v4
      with:
        name: api-build
        path: ./api-build/
        
    - name: Deploy to Azure Static Web Apps (Staging)
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_STAGING }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "./pwa-build/"
        skip_app_build: true

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-pwa, build-api, playwright-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download PWA artifacts
      uses: actions/download-artifact@v4
      with:
        name: pwa-build
        path: ./pwa-build/
        
    - name: Download API artifacts
      uses: actions/download-artifact@v4
      with:
        name: api-build
        path: ./api-build/
        
    - name: Deploy to Azure Static Web Apps (Production)
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "./pwa-build/"
        skip_app_build: true
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release created by GitHub Actions
          
          Changes in this release:
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false